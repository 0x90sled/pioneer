#include <math.h>
#include <float.h>

#include "jjtypes.h"
#include "jjvector.h"
#include "fastmath.h"

static Vector xaxis = { 1.0f, 0.0f, 0.0f };
static Vector yaxis = { 0.0f, 1.0f, 0.0f };

void MatToAxisAng (Matrix *m, AxisAng *aa)
{
	Vector v2 = { m->x2, m->y2, m->z2 };
	aa->v.x = m->x1; aa->v.y = m->y1; aa->v.z = m->z1;
	VecNorm (&aa->v, &aa->v);

	Vector axis2, axis3;
	float tv = VecDot (&xaxis, &aa->v);
	if (tv*tv < 0.5) VecCross (&aa->v, &xaxis, &axis2);
	else VecCross (&aa->v, &yaxis, &axis2);
	VecNorm (&axis2, &axis2);
	VecCross (&aa->v, &axis2, &axis3);

	float ta = VecDot (&v2, &axis2);
//_ASSERTE (ta < 1.0f && ta > -1.0f);
	if (ta > 1.0f) ta = 1.0f;
	if (ta < -1.0f) ta = -1.0f;

	aa->a = (float) acos (ta);
	if (VecDot (&v2, &axis3) < 0.0f) aa->a *= -1.0f;
}

void AxisAngToMat (AxisAng *aa, Matrix *m)
{
	Vector v2, v3;
	m->x1 = aa->v.x; m->y1 = aa->v.y; m->z1 = aa->v.z;

	Vector axis2, axis3;
	float tv = VecDot (&xaxis, &aa->v);
	if (tv*tv < 0.5) VecCross (&aa->v, &xaxis, &axis2);
	else VecCross (&aa->v, &yaxis, &axis2);
	VecNorm (&axis2, &axis2);
	VecCross (&aa->v, &axis2, &axis3);

	VecMul (&axis2, cos (aa->a), &axis2);
	VecMul (&axis3, sin (aa->a), &axis3);
	VecAdd (&axis2, &axis3, &v2);
	VecCross (&aa->v, &v2, &v3);

	m->x2 = v2.x; m->y2 = v2.y; m->z2 = v2.z;
	m->x3 = v3.x; m->y3 = v3.y; m->z3 = v3.z;
}


void MatToQuat (Matrix *m1, Quaternion *res)
{
	float trace = m1->x1 + m1->y2 + m1->z3 + 1.0f;
	if (trace > 0.0f) {
		float qs = 0.5f / sqrtf (trace);
		res->w = 0.25f / qs;
		res->x = (m1->z2 - m1->y3) * qs;
		res->y = (m1->x3 - m1->z1) * qs;
		res->z = (m1->y1 - m1->x2) * qs;
	}
	else {
		if (m1->x1 > m1->y2 && m1->x1 > m1->z3) {
			float qs = 2.0f * sqrtf (1.0f + m1->x1 - m1->y2 - m1->z3);
			res->x = 0.25f * qs;
			res->y = (m1->x2 + m1->y1) / qs;
			res->z = (m1->x3 + m1->z1) / qs;
			res->w = (m1->z2 - m1->y3) / qs;
		}
		else if (m1->y2 > m1->z3) {
			float qs = 2.0f * sqrtf (1.0f + m1->y2 - m1->x1 - m1->z3);
			res->x = (m1->x2 + m1->y1) / qs;
			res->y = 0.25f * qs;
			res->z = (m1->y3 + m1->z2) / qs;
			res->w = (m1->x3 - m1->z1) / qs;
		}
		else {
			float qs = 2.0f * sqrtf (1.0f + m1->z3 - m1->x1 - m1->y2);
			res->x = (m1->x3 + m1->z1) / qs;
			res->y = (m1->y3 + m1->z2) / qs;
			res->z = 0.25f * qs;
			res->w = (m1->y1 - m1->x2) / qs;
		}
	}
}

void QuatToMat (Quaternion *q1, Matrix *res)
{
	double sqw = q1->w*q1->w;
	double sqx = q1->x*q1->x;
	double sqy = q1->y*q1->y;
	double sqz = q1->z*q1->z;
	res->x1 = (float)(sqx - sqy - sqz + sqw);
	res->y2 = (float)(-sqx + sqy - sqz + sqw);
	res->z3 = (float)(-sqx - sqy + sqz + sqw);
    
	double tmp1 = q1->x*q1->y;
	double tmp2 = q1->z*q1->w;
	res->y1 = (float)(2.0 * (tmp1 + tmp2));
	res->x2 = (float)(2.0 * (tmp1 - tmp2));

	tmp1 = q1->x*q1->z;
	tmp2 = q1->y*q1->w;
	res->z1 = (float)(2.0 * (tmp1 - tmp2));
	res->x3 = (float)(2.0 * (tmp1 + tmp2));

	tmp1 = q1->y*q1->z;
	tmp2 = q1->x*q1->w;
	res->z2 = (float)(2.0 * (tmp1 + tmp2));
	res->y3 = (float)(2.0 * (tmp1 - tmp2));
}


int g_pInvTable[64] = {
	0x7e03f8, 0x7a232d, 0x76603e, 0x72b9d6, 0x6f2eb7, 0x6bbdb3, 0x6865ac, 0x652598,
	0x61fc78, 0x5ee95c, 0x5beb62, 0x5901b2, 0x562b81, 0x53680d, 0x50b6a0, 0x4e168a,
	0x4b8728, 0x4907da, 0x46980c, 0x443730, 0x41e4bc, 0x3fa030, 0x3d6910, 0x3b3ee7,
	0x392144, 0x370fbb, 0x3509e7, 0x330f63, 0x311fd4, 0x2f3ade, 0x2d602b, 0x2b8f6a,
	0x29c84a, 0x280a81, 0x2655c4, 0x24a9cf, 0x23065e, 0x216b31, 0x1fd80a, 0x1e4cad,
	0x1cc8e1, 0x1b4c70, 0x19d723, 0x1868c8, 0x17012e, 0x15a025, 0x144581, 0x12f114,
	0x11a2b4, 0x105a38, 0x0f177a, 0x0dda52, 0x0ca29c, 0x0b7034, 0x0a42f8, 0x091ac7,
	0x07f781, 0x06d905, 0x05bf37, 0x04a9fa, 0x039930, 0x028cc0, 0x01848e, 0x008081,
	};

int g_pInvTableLow[64] = {
	0x7c0fc3, 0x783e11, 0x74898f, 0x70f0f3, 0x6d7305, 0x6a0ea3, 0x66c2b6, 0x638e3a,
	0x60703a, 0x5d67ca, 0x5a740f, 0x579437, 0x54c77c, 0x520d22, 0x4f6476, 0x4cccce,
	0x4a4589, 0x47ce0e, 0x4565ca, 0x430c32, 0x40c0c2, 0x3e82fb, 0x3c5265, 0x3a2e8d,
	0x381704, 0x360b62, 0x340b42, 0x321644, 0x302c0c, 0x2e4c42, 0x2c7692, 0x2aaaac,
	0x28e840, 0x272f06, 0x257eb6, 0x23d70b, 0x2237c4, 0x20a0a1, 0x1f1167, 0x1d89d9,
	0x1c09c1, 0x1a90e9, 0x191f1b, 0x17b427, 0x164fdb, 0x14f20a, 0x139a86, 0x124925,
	0x10fdbd, 0x0fb825, 0x0e7836, 0x0d3dcc, 0x0c08c1, 0x0ad8f4, 0x09ae41, 0x088889,
	0x0767ac, 0x064b8b, 0x053409, 0x042109, 0x03126f, 0x020821, 0x010205, 0x000001,
	};

int g_pInvTableHigh[64] = {
	0x7fffff, 0x7c0fc1, 0x783e10, 0x74898d, 0x70f0f1, 0x6d7304, 0x6a0ea1, 0x66c2b4,
	0x638e39, 0x607038, 0x5d67c9, 0x5a740e, 0x579436, 0x54c77b, 0x520d21, 0x4f6475,
	0x4ccccd, 0x4a4588, 0x47ce0c, 0x4565c8, 0x430c31, 0x40c0c1, 0x3e82fa, 0x3c5264,
	0x3a2e8c, 0x381703, 0x360b61, 0x340b41, 0x321643, 0x302c0b, 0x2e4c41, 0x2c7692,
	0x2aaaab, 0x28e83f, 0x272f05, 0x257eb5, 0x23d70a, 0x2237c3, 0x20a0a1, 0x1f1166,
	0x1d89d9, 0x1c09c1, 0x1a90e8, 0x191f1a, 0x17b426, 0x164fda, 0x14f209, 0x139a86,
	0x124925, 0x10fdbc, 0x0fb824, 0x0e7835, 0x0d3dcb, 0x0c08c1, 0x0ad8f3, 0x09ae41,
	0x088889, 0x0767ab, 0x064b8a, 0x053408, 0x042108, 0x03126f, 0x020821, 0x010204,
	};

int g_pSqrtTable[64] = {
	0x366d96, 0x3936a1, 0x3bf51b, 0x3ea979, 0x415428, 0x43f58d, 0x468e06, 0x491dec,
	0x4ba592, 0x4e2545, 0x509d4e, 0x530df3, 0x557775, 0x57da10, 0x5a35fe, 0x5c8b77,
	0x5edaae, 0x6123d4, 0x636719, 0x65a4a9, 0x67dcae, 0x6a0f50, 0x6c3cb7, 0x6e6507,
	0x708862, 0x72a6ea, 0x74c0c0, 0x76d603, 0x78e6ce, 0x7af340, 0x7cfb72, 0x7eff7f,
	0x00ff02, 0x02f734, 0x04e7ee, 0x06d182, 0x08b43d, 0x0a9067, 0x0c6641, 0x0e360b,
	0x100000, 0x11c456, 0x138341, 0x153cf2, 0x16f196, 0x18a15a, 0x1a4c65, 0x1bf2df,
	0x1d94ec, 0x1f32af, 0x20cc4a, 0x2261dc, 0x23f383, 0x25815a, 0x270b7f, 0x28920a,
	0x2a1514, 0x2b94b5, 0x2d1104, 0x2e8a16, 0x300000, 0x3172d6, 0x32e2ac, 0x344f93,
	};

int g_pSqrtTableLow[64] = {
	0x3504f3, 0x37d375, 0x3a9728, 0x3d5087, 0x400000, 0x42a5fe, 0x4542e1, 0x47d706,
	0x4a62c2, 0x4ce665, 0x4f623a, 0x51d689, 0x544395, 0x56a99b, 0x5908d9, 0x5b6186,
	0x5db3d7, 0x600000, 0x624630, 0x648695, 0x66c15a, 0x68f6a9, 0x6b26a9, 0x6d517f,
	0x6f7751, 0x71983e, 0x73b46a, 0x75cbf2, 0x77def6, 0x79ed91, 0x7bf7df, 0x7dfdfc,
	0x000000, 0x01fc10, 0x03f07b, 0x05dd98, 0x07c3b6, 0x09a320, 0x0b7c1a, 0x0d4ee4,
	0x0f1bbd, 0x10e2dc, 0x12a476, 0x1460be, 0x1617e3, 0x17ca11, 0x197774, 0x1b2032,
	0x1cc471, 0x1e6455, 0x200000, 0x219792, 0x232b2b, 0x24bae7, 0x2646e1, 0x27cf36,
	0x2953fd, 0x2ad550, 0x2c5345, 0x2dcdf3, 0x2f456f, 0x30b9cc, 0x322b20, 0x33997c,
	};

int g_pSqrtTableHigh[64] = {
	0x37d374, 0x3a9728, 0x3d5086, 0x3fffff, 0x42a5fd, 0x4542e1, 0x47d705, 0x4a62c1,
	0x4ce664, 0x4f623a, 0x51d689, 0x544394, 0x56a99b, 0x5908d8, 0x5b6185, 0x5db3d7,
	0x5fffff, 0x62462f, 0x648694, 0x66c15a, 0x68f6a8, 0x6b26a8, 0x6d517f, 0x6f7750,
	0x71983e, 0x73b469, 0x75cbf2, 0x77def5, 0x79ed90, 0x7bf7df, 0x7dfdfb, 0x7fffff,
	0x01fc0f, 0x03f07b, 0x05dd98, 0x07c3b6, 0x09a31f, 0x0b7c19, 0x0d4ee4, 0x0f1bbc,
	0x10e2db, 0x12a475, 0x1460bd, 0x1617e2, 0x17ca11, 0x197773, 0x1b2031, 0x1cc470,
	0x1e6454, 0x200000, 0x219792, 0x232b2b, 0x24bae6, 0x2646e1, 0x27cf35, 0x2953fd,
	0x2ad550, 0x2c5345, 0x2dcdf3, 0x2f456e, 0x30b9cc, 0x322b20, 0x33997c, 0x3504f3,
	};

int g_pISqrtTable[64] = {
	0xb39f19, 0xb0eb96, 0xae565c, 0xabdd46, 0xa97e62, 0xa737f0, 0xa50855, 0xa2ee1d,
	0xa0e7f5, 0x9ef4a4, 0x9d130e, 0x9b422c, 0x99810c, 0x97ced0, 0x962aa9, 0x9493d9,
	0x9309af, 0x918b87, 0x9018c6, 0x8eb0e0, 0x8d534f, 0x8bff97, 0x8ab544, 0x8973e8,
	0x883b1e, 0x870a87, 0x85e1c7, 0x84c08b, 0x83a682, 0x829362, 0x8186e2, 0x8080c1,
	0x7e05ec, 0x7a33f9, 0x768cdc, 0x730d8a, 0x6fb345, 0x6c7b90, 0x69642a, 0x666b02,
	0x638e39, 0x60cc16, 0x5e2305, 0x5b9193, 0x59166b, 0x56b051, 0x545e22, 0x521ed0,
	0x4ff162, 0x4dd4ed, 0x4bc89b, 0x49cba2, 0x47dd45, 0x45fcd6, 0x4429af, 0x426337,
	0x40a8de, 0x3efa1c, 0x3d5671, 0x3bbd67, 0x3a2e8c, 0x38a975, 0x372dbf, 0x35bb09,
	};

int g_pISqrtTableLow[64] = {
	0xb2416a, 0xaf9d54, 0xad166d, 0xaaaaab, 0xa85836, 0xa61d60, 0xa3f8a3, 0xa1e89c,
	0x9fec04, 0x9e01b3, 0x9c2896, 0x9a5fb2, 0x98a61f, 0x96fb07, 0x955da2, 0x93cd3b,
	0x924925, 0x90d0c3, 0x8f6381, 0x8e00d5, 0x8ca840, 0x8b5948, 0x8a137e, 0x88d677,
	0x87a1d2, 0x867532, 0x85503e, 0x8432a5, 0x831c1a, 0x820c53, 0x81030a, 0x800000,
	0x7c1765, 0x785b43, 0x74c868, 0x715bf0, 0x6e133f, 0x6aebf6, 0x67e3ee, 0x64f92f,
	0x6229ed, 0x5f7483, 0x5cd76e, 0x5a514a, 0x57e0cf, 0x5584ce, 0x533c2e, 0x5105ec,
	0x4ee116, 0x4ccccd, 0x4ac840, 0x48d2ac, 0x46eb5b, 0x4511a3, 0x4344e7, 0x418490,
	0x3fd012, 0x3e26ec, 0x3c88a0, 0x3af4bb, 0x396acf, 0x37ea74, 0x36734a, 0x3504f4,
	};

int g_pISqrtTableHigh[64] = {
	0xb504f3, 0xb2416a, 0xaf9d53, 0xad166c, 0xaaaaab, 0xa85835, 0xa61d5f, 0xa3f8a2,
	0xa1e89b, 0x9fec04, 0x9e01b3, 0x9c2896, 0x9a5fb2, 0x98a61f, 0x96fb06, 0x955da2,
	0x93cd3a, 0x924925, 0x90d0c3, 0x8f6381, 0x8e00d5, 0x8ca83f, 0x8b5948, 0x8a137d,
	0x88d677, 0x87a1d2, 0x867532, 0x85503e, 0x8432a5, 0x831c1a, 0x820c52, 0x81030a,
	0x800000, 0x7c1764, 0x785b42, 0x74c867, 0x715bef, 0x6e133e, 0x6aebf5, 0x67e3ed,
	0x64f92e, 0x6229ed, 0x5f7483, 0x5cd76e, 0x5a514a, 0x57e0cf, 0x5584cd, 0x533c2e,
	0x5105ec, 0x4ee116, 0x4ccccd, 0x4ac83f, 0x48d2ab, 0x46eb5a, 0x4511a3, 0x4344e6,
	0x41848f, 0x3fd012, 0x3e26eb, 0x3c889f, 0x3af4ba, 0x396ace, 0x37ea74, 0x36734a,
	};
